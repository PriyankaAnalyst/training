#1) Calories_consumed-> predict weight gained using calories consumed


CaloriesData <- read.csv(choose.files())
attach(CaloriesData)

str(CaloriesData)

summary(CaloriesData)

plot(CaloriesData$Weight.gained..grams.,CaloriesData$Calories.Consumed)

weight <- CaloriesData$Weight.gained..grams.
calories <- CaloriesData$Calories.Consumed

#correlation coeff r

cor(weight,calories) #0.946991 | R is 1

#simple linear regression

reg<-lm(calories~weight) # lm(Y ~ X)

summary(reg) #R-squared: 0.8968


#prediction model

pred <- predict(reg,interval = "predict") 
pred
#PVALUE IS less than 0.05 so we can use B0 and B1

a<- confint(reg,level = 0.95)
a

# Trying to do better R sqaure value model

reg1<-lm(weight~log(Calories.Consumed))  # Using logarthmic transformation

summary(reg1)  # R-squared value is 0.8077

a1<- confint(reg1,level = 0.95)
a1

#prediction model

pred1 <- predict(reg1,interval = "predict") 
pred1

#Final Model where we can go with "simple linear regression* with R-squared: 0.8968
#We can accept the final value.

#2) Delivery_time -> Predict delivery time using sorting time 



DeliveryData <- read.csv(choose.files())
attach(DeliveryData)

str(DeliveryData)

summary(DeliveryData)

plot(DeliveryData$Delivery.Time,DeliveryData$Sorting.Time)

timings<- DeliveryData$Delivery.Time
sortings <- DeliveryData$Sorting.Time

#correlation coeff r

cor(timings,sortings) #0.8259973 | R is 1

#simple linear regression

reg<-lm(sortings~timings) # lm(Y ~ X)

summary(reg) #R-squared: 0.6823

#prediction model

pred <- predict(reg,interval = "predict") 
pred


a<- confint(reg,level = 0.95)
a

#P-value is less than 0.05. So correlation is significant and also R-Square value is 0.6823. 
#Model 68.23%. which is not proper. We need to go further for more test.

reg1<-lm(timings~log(sortings))  # Using logarthmic transformation

summary(reg1)  # R-squared value is 0.6954

pred1 <- predict(reg1,interval = "predict") 
pred1

a1<- confint(reg1,level = 0.95)
a1

#P-value is less than 0.05. So correlation is significant and also R-Square value is 0.6823. 
#Model 68.23%. which is not proper. We need to go further for more test.

install.packages("mvinfluence")

library(mvinfluence)

influenceIndexPlot(reg1)

delivery <- lm(Delivery.Time ~ Sorting.Time, data = DeliveryData[c(-5,-9,-21),])
summary(delivery)

#R-Square value is increased to 0.8332. 
#Thatâ€™s mean this model will predict the output 83.32% time correct



